# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Step 1: Load or simulate the dataset
# For simplicity, we'll simulate a small dataset
data = {
    'YearsExperience': [1.1, 2.0, 3.2, 4.0, 5.0, 6.0, 7.1, 8.2, 9.0, 10.5],
    'Salary': [39343, 46205, 60150, 64445, 66029, 83088, 91738, 101302, 105582, 121872]
}

# Convert the dataset into a pandas DataFrame
df = pd.DataFrame(data)

# Step 2: Split the data into features (X) and target (y)
X = df[['YearsExperience']]  # Features (2D array expected for regression)
y = df['Salary']  # Target variable (Salary)

# Step 3: Split the dataset into training (80%) and testing (20%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Fit a linear regression model
lr = LinearRegression()
lr.fit(X_train, y_train)

# Step 5: Make predictions on the test set
y_pred = lr.predict(X_test)

# Step 6: Evaluate the model's performance using Mean Squared Error (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error (MSE) on the test set: {mse:.2f}')
